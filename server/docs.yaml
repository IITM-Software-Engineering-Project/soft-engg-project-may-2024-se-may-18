openapi: 3.0.0
info:
  title: Seek-Next
  description: This is the backend documentation for the Seek-Next platform, which leverages Generative AI (GenAI) to deliver an enhanced learning experience.
  version: 0.1.0
paths:
  /:
    get:
      summary: Read Root
      operationId: read_root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /register:
    post:
      tags:
        - authentication
      summary: Register
      description: Register a new user to the portal
      operationId: register_register_post
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
  /login:
    post:
      tags:
        - authentication
      summary: Login
      description: Login to the application
      operationId: login_login_post
      responses:
        '200':
          description: Access Token and Token Type
          content:
            application/json:
              schema: {}
  /ai-search-courses:
    post:
      tags:
        - Gen AI
      summary: Gemini
      description: Search for courses using generative AI
      operationId: gemini_ai_search_courses_post
      responses:
        '200':
          description: Response from AI in the form of a json
          content:
            application/json:
              schema: {}
  /ai-explain-course:
    post:
      tags:
        - Gen AI
      summary: Gemini
      description: Answer queston for a single course using generative AI
      operationId: gemini_ai_explain_course_post
      responses:
        '200':
          description: Response from AI in the form of a json with a text message inside
          content:
            application/json:
              schema: {}
  /ai-summarize-transcript:
    post:
      tags:
        - Gen AI
      summary: Gemini
      description: Summarize a transcript using generative AI
      operationId: gemini_ai_summarize_transcript_post
      responses:
        '200':
          description: Response from AI in the form of a json with a text message inside
          content:
            application/json:
              schema: {}
  /ai-programming-feedback:
    post:
      tags:
        - Gen AI
      summary: Gemini
      description: Get feedback on programming code using generative AI
      operationId: gemini_ai_programming_feedback_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_gemini_ai_programming_feedback_post'
        required: true
      responses:
        '200':
          description: Response from AI in the form of a JSON with a text message inside
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /add_module:
    post:
      tags:
        - Module
      summary: Add Module
      description: Add new module to course
      operationId: add_module_add_module_post
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
  /edit_module/{module_id}:
    put:
      tags:
        - Module
      summary: Edit Module
      description: Editing new module
      operationId: edit_module_edit_module__module_id__put
      parameters:
        - name: module_id
          in: path
          required: true
          schema:
            type: integer
            title: Module Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /delete_module/{module_id}:
    delete:
      tags:
        - Module
      summary: Delete Module
      description: Delete module
      operationId: delete_module_delete_module__module_id__delete
      parameters:
        - name: module_id
          in: path
          required: true
          schema:
            type: integer
            title: Module Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /add_lecture:
    post:
      tags:
        - Lecture
      summary: Add Lecture
      description: Add lecture to a module
      operationId: add_lecture_add_lecture_post
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
  /edit_lecture/{lecture_id}:
    put:
      tags:
        - Lecture
      summary: Edit Lecture
      description: Editing lecture
      operationId: edit_lecture_edit_lecture__lecture_id__put
      parameters:
        - name: lecture_id
          in: path
          required: true
          schema:
            type: integer
            title: Lecture Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /delete_lecture/{lecture_id}:
    delete:
      tags:
        - Lecture
      summary: Delete Lecture
      description: Deleting Lecture from the module
      operationId: delete_lecture_delete_lecture__lecture_id__delete
      parameters:
        - name: lecture_id
          in: path
          required: true
          schema:
            type: integer
            title: Lecture Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /add_assignment:
    post:
      tags:
        - Assignment
        - Module
      summary: Add Assignment
      description: Adding assignment to module
      operationId: add_assignment_add_assignment_post
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
  /edit_assignment/{assignment_id}:
    put:
      tags:
        - Module
        - Assignment
      summary: Edit Assignment
      description: Editing Assignment
      operationId: edit_assignment_edit_assignment__assignment_id__put
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
            title: Assignment Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /delete_assignment/{assignment_id}:
    delete:
      tags:
        - Assignment
        - Module
      summary: Delete Assignment
      description: Deleting Assignment
      operationId: delete_assignment_delete_assignment__assignment_id__delete
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
            title: Assignment Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /add_question:
    post:
      tags:
        - Assignment
      summary: Add Question
      description: Adding question to assignment
      operationId: add_question_add_question_post
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
  /edit_question/{question_id}:
    put:
      tags:
        - Assignment
      summary: Edit Question
      description: Edit Question
      operationId: edit_question_edit_question__question_id__put
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
            title: Question Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /delete_question/{question_id}:
    delete:
      tags:
        - Assignment
      summary: Delete Question
      description: Delete question from Assignment
      operationId: delete_question_delete_question__question_id__delete
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
            title: Question Id
      responses:
        '200':
          description: Message indicating success or failure
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /instructor/enrolled-students/{course_id}:
    get:
      tags:
        - Instructor
        - Admin
      summary: Get Enrolled Students
      description: Get the list of students enrolled in a course.
      operationId: get_enrolled_students_instructor_enrolled_students__course_id__get
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
            title: Course Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentEnrolled'
                title: Response Get Enrolled Students Instructor Enrolled Students  Course Id  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /instructor/create-exam:
    post:
      tags:
        - Exam
      summary: Create Exam
      description: Create an exam for a course
      operationId: create_exam_instructor_create_exam_post
      parameters:
        - name: course_id
          in: query
          required: true
          schema:
            type: integer
            title: Course Id
        - name: exam_id
          in: query
          required: true
          schema:
            type: integer
            title: Exam Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /instructor/grade-exam:
    put:
      tags:
        - Exam
      summary: Grade Exam
      description: Grade an exam
      operationId: grade_exam_instructor_grade_exam_put
      parameters:
        - name: course_id
          in: query
          required: true
          schema:
            type: integer
            title: Course Id
        - name: student_id
          in: query
          required: true
          schema:
            type: integer
            title: Student Id
        - name: exam_id
          in: query
          required: true
          schema:
            type: integer
            title: Exam Id
        - name: marks
          in: query
          required: true
          schema:
            type: number
            title: Marks
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /course-progress:
    get:
      tags:
        - Instructor
      summary: Get Course Progress
      description: Get the progress of a student in a course
      operationId: get_course_progress_course_progress_get
      parameters:
        - name: course_id
          in: query
          required: true
          schema:
            type: integer
            title: Course Id
        - name: student_id
          in: query
          required: true
          schema:
            type: integer
            title: Student Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /compute:
    post:
      tags:
        - Coding Assignment
      summary: Compute Code
      description: Compute test cases for submitted code using subprocesses
      operationId: compute_code_compute_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputeCodeRequest'
        required: true
      responses:
        '200':
          description: Message indicating test case results
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /add-code-info:
    post:
      tags:
        - Coding Assignment
        - Instructor
      summary: Add Code Info
      description: Add or update code information in the database
      operationId: add_code_info_add_code_info_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeInfo'
        required: true
      responses:
        '200':
          description: Code information added or updated successfully
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /delete-code-info:
    delete:
      tags:
        - Coding Assignment
        - Instructor
      summary: Delete Code Info
      description: Delete code information from the database
      operationId: delete_code_info_delete_code_info_delete
      parameters:
        - name: problem_id
          in: query
          required: true
          schema:
            type: string
            title: Problem Id
      responses:
        '200':
          description: Code information deleted successfully
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /student/enrolled_course/student-overview:
    get:
      tags:
        - Student
      summary: Get Student Course Overview
      description: Get an overview of the student's course including assignments and exam marks.
      operationId: get_student_course_overview_student_enrolled_course_student_overview_get
      parameters:
        - name: course_id
          in: query
          required: true
          schema:
            type: integer
            title: Course Id
        - name: student_id
          in: query
          required: true
          schema:
            type: integer
            title: Student Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseOverview'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /student/enrolled_course/:
    get:
      tags:
        - Student
      summary: Get Module Details
      description: Get details of a module of the course.
      operationId: get_module_details_student_enrolled_course__get
      parameters:
        - name: course_id
          in: query
          required: true
          schema:
            type: integer
            title: Course Id
        - name: module_id
          in: query
          required: true
          schema:
            type: integer
            title: Module Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /student/courses/{course_id}:
    get:
      tags:
        - Student
      summary: Get Course Details
      description: Get details of a course.
      operationId: get_course_details_student_courses__course_id__get
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
            title: Course Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /student/enroll:
    post:
      tags:
        - Student
      summary: Enroll Student
      description: Enroll a student in a course.
      operationId: enroll_student_student_enroll_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCourseOverviewRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /student/enrolled-courses/{student_id}:
    get:
      tags:
        - Student
      summary: Get Enrolled Courses
      description: Get the list of courses enrolled by a student.
      operationId: get_enrolled_courses_student_enrolled_courses__student_id__get
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            title: Student Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseEnrolled'
                title: Response Get Enrolled Courses Student Enrolled Courses  Student Id  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /courses/create:
    post:
      tags:
        - Admin
      summary: Create Course
      description: Create a new course
      operationId: create_course_courses_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /courses/update:
    put:
      tags:
        - Admin
      summary: Update Course
      description: Update a course
      operationId: update_course_courses_update_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /courses/delete:
    delete:
      tags:
        - Admin
      summary: Delete Course
      description: Delete a course
      operationId: delete_course_courses_delete_delete
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                title: Response Delete Course Courses Delete Delete
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /courses/get:
    get:
      tags:
        - Admin
      summary: Get Course
      description: Get a course by ID
      operationId: get_course_courses_get_get
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /courses/list:
    get:
      tags:
        - Admin
      summary: Get All Courses
      description: Get all courses with pagination
      operationId: get_all_courses_courses_list_get
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            title: Limit
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
            title: Skip
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseResponse'
                title: Response Get All Courses Courses List Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Body_gemini_ai_programming_feedback_post:
      properties:
        images:
          items:
            type: string
            format: binary
          type: array
          title: Images
      type: object
      required:
        - images
      title: Body_gemini_ai_programming_feedback_post
    CodeInfo:
      properties:
        problem_id:
          type: string
          title: Problem Id
        user_id:
          type: string
          title: User Id
        total_test_cases:
          type: string
          title: Total Test Cases
        test_cases:
          items:
            $ref: '#/components/schemas/TestCase'
          type: array
          title: Test Cases
      type: object
      required:
        - problem_id
        - user_id
        - total_test_cases
        - test_cases
      title: CodeInfo
      example:
        problem_id: 1
        test_cases:
          - expected_output: '1'
            input: '1'
        total_test_cases: 1
        user_id: 1
    ComputeCodeRequest:
      properties:
        code:
          type: string
          title: Code
        user_id:
          type: string
          title: User Id
        language:
          type: string
          title: Language
        problem_id:
          type: string
          title: Problem Id
      type: object
      required:
        - code
        - user_id
        - language
        - problem_id
      title: ComputeCodeRequest
      example:
        code: |-
          import sys
          class Solution:
              def print_statement(s):
                  print(s)
          def main():
              # Read input from stdin
              input_data = sys.stdin.read().strip()
              Solution.print_statement(input_data)
          if __name__ == "__main__":     main() 
        language: python
        problem_id: '1'
        user_id: '1'
    CourseCreate:
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        total_modules:
          type: integer
          title: Total Modules
        price:
          type: number
          title: Price
      type: object
      required:
        - title
        - description
        - total_modules
        - price
      title: CourseCreate
    CourseDetails:
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        total_modules:
          type: integer
          title: Total Modules
        price:
          type: number
          title: Price
      type: object
      required:
        - title
        - description
        - total_modules
        - price
      title: CourseDetails
    CourseEnrolled:
      properties:
        id:
          type: integer
          title: Id
        title:
          type: string
          title: Title
      type: object
      required:
        - id
        - title
      title: CourseEnrolled
    CourseOverview:
      properties:
        course_description:
          type: string
          title: Course Description
        assignment_marks:
          type: object
          title: Assignment Marks
        exam_marks:
          type: object
          title: Exam Marks
      type: object
      required:
        - course_description
        - assignment_marks
        - exam_marks
      title: CourseOverview
    CourseResponse:
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        total_modules:
          type: integer
          title: Total Modules
        price:
          type: number
          title: Price
        id:
          type: integer
          title: Id
      type: object
      required:
        - title
        - description
        - total_modules
        - price
        - id
      title: CourseResponse
    CourseUpdate:
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        total_modules:
          type: integer
          title: Total Modules
        price:
          type: number
          title: Price
        id:
          type: integer
          title: Id
      type: object
      required:
        - title
        - description
        - total_modules
        - price
        - id
      title: CourseUpdate
    EnrollmentResponse:
      properties:
        message:
          type: string
          title: Message
      type: object
      required:
        - message
      title: EnrollmentResponse
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    ModuleDetails:
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        total_lectures:
          type: integer
          title: Total Lectures
        total_assignments:
          type: integer
          title: Total Assignments
      type: object
      required:
        - title
        - description
        - total_lectures
        - total_assignments
      title: ModuleDetails
    StudentCourseOverviewRequest:
      properties:
        course_id:
          type: integer
          title: Course Id
        student_id:
          type: integer
          title: Student Id
      type: object
      required:
        - course_id
        - student_id
      title: StudentCourseOverviewRequest
    StudentEnrolled:
      properties:
        id:
          type: integer
          title: Id
        username:
          type: string
          title: Username
      type: object
      required:
        - id
        - username
      title: StudentEnrolled
    TestCase:
      properties:
        input:
          type: string
          title: Input
        expected_output:
          type: string
          title: Expected Output
      type: object
      required:
        - input
        - expected_output
      title: TestCase
      example:
        expected_output: '1'
        input: '1'
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
